{--

Eq
  | Eq is a typeclass for types that can be compared for equality.

- Write out the Eq "Laws"
  * Note that the Haskell Report that defines the official Haskell language
    does not give an official laws for Eq. Despite this, there are customary
    laws given in the docs for Eq that represent the general expected practice
    for implementing Eq. The laws given in the answer here are those, with
    one omission (Substitutivity), for simplicities sake.

- Define an enum type and provide an Eq instance for it
- Define a record type and provide an Eq instance for it
- Define another enum type and derive Eq for it
- Define another record type and derive Eq for it

--}

{--
  Newtypes
    | A "newtype" is a type defined with tha `newtype` keyword. It is a
    | trivial wrapper around an existing type that creates a brand new type
    | out of it that the compiler will treat as different from the original
    | type. This is useful for many things, including distinguishing between
    | values that would otherwise be the same simple type. The compiler
    | removes newtype wrappers at compile time so that there is littre to
    | no runtime cost associated with having many newtypes.

- Define a type using newtype to represent a person's Name
- Implement a function nameToString to convert a Name to String
- Define a type using newtype to represent a person's Hometown
- Implement a function hometownToString to convert a Hometown to String
- Define a type using newtype to represent a person's Age
- Define a Person record using these three types.
- Construct a value of type Person.
- Implement a function to create a String introducing a Person by stating their
  name and where they are from. Be polite and omit their age from the
  introduction.

| Newtypes can also be used create a wrapper for the purpose of providing
| a new typeclass instance for a type that already has one. We will use this
| technique in these reps occasionally to allow us to re-write the typeclass
| implementations in common libraries as a way to understand them better.


- define an Eq instance for Hometown that is equivalent to the one for String
- define an Eq instance for Name that compares names in a case-insensitive manner.

--}


{--

Semigroup
  | Semigroups are types that "combine". They have an binary operation that
  | takes to items of the type and produces a result of the same type. That
  | operation must be associative. We often talk about Semigroups as
  | appending because that is a very common use case, but the operation is
  | not actually required to represent an append.

- Write out the Semigroup law

The following reps will help you remember what `<>` does for List, Ordering,
Maybe, a Function.

- Implement combineList1: actually implement appending for lists yourself
- Implement combineList2: Use a function from Data.List this time.
- Implement combineOrdering
- Implement combineMaybe (Using Semigroup of underlying type)
- Implement combineFunction (Using Semigroup of underlying type)

- Create a newtype around Int and implement Semigroup using addition
- Create a newtype around Int and implement Semigroup using multiplication

Monoid
  | Monoid are Semigroups for which there is a value that turns the Semigroup's
  | combining operation into the identify function. This value is called the
  | "identity" of the Semigroup operation, and is written as `mempty` in
  | Haskell. The Monoid laws express the notion of `mempty` being the
  | identity of the Semigroup.

- Write out the Monoid laws for mempty

These reps will help you remember what the Semigroup identity is for List,
Ordering, Maybe and Function.

- Implement memptyList
- Implement memptyOrdering
- Implement memptyMaybe
- Implement memptyFunction

- implement Monoid for your addition newtype from above
- implement Monoid for your multiplication newtype from above

--}

{--
  Data.Ord / Sorting lists

  - define an enum for player rank and build a manual Ord instance for it
  - sort a list of ranks into ascending order
  - sort a list of ranks into descinding ordering using Ord.Down
  - define a Player record with name and rank
      - Sort a list of players alphabetically using sortBy / comparing
      - Sort a list of players by rank using sortOn
  - Build a compare function for players that compares by name and then rank
      - Hint: use Ord.comparing to compare the fields
      - build one that is fully explicit
      - Then build one that uses the Ordering Semigroup
      - Then build one that uses the Ordering Semigroup and the (->) Semigroup

--}

{--
   Control.Applicative.Free

   - Red / Black tagging type w/ contructors Functor instance
   - ban function
   - use liftAp to build taggedPlus
   - use runAp to implement runBanned
   - use runAp_ to implement tags
   - use iterAp to implement runIter
   - use hoistAp / retractAp to implement runBanned2
--}


{--
  DSL Encoding
  (completely different meaning of tagged!)

  Define regular ADT for TaglessInitial encoding of
  String concat / Int addition

  Define result type and evalTaggedInitial

  Use GADT to define TaglessInitial encoding
  Define evalTaglessInitial

  Define typeclass for final encoding of string and int operations
  Define a newtype to implement those classes
  implement Eval for that newtype

  Demonstrate an int and string expression
--}

